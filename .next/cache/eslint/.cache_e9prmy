[{"/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/callback/route.ts":"1","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/components/AuthComponent.tsx":"2","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/page.tsx":"3","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/chat/route.ts":"4","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ChatListItem.tsx":"5","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/NewChat.tsx":"6","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/Search.tsx":"7","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/alert-dialog.tsx":"8","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/button.tsx":"9","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/card.tsx":"10","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/context-menu.tsx":"11","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/dialog.tsx":"12","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/form.tsx":"13","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/icons.tsx":"14","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/input.tsx":"15","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/label.tsx":"16","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/menubar.tsx":"17","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/scroll-area.tsx":"18","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/separator.tsx":"19","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/textarea.tsx":"20","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/toast.tsx":"21","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/toaster.tsx":"22","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/use-toast.ts":"23","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/dataset/components/Form.tsx":"24","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/dataset/page.tsx":"25","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/embedding/route.ts":"26","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/layout.tsx":"27","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/lib/utils.ts":"28","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/page.tsx":"29","/home/kirtan/Documents/supabase-chat-gpt-main/src/middleware.ts":"30"},{"size":644,"mtime":1700936517897,"results":"31","hashOfConfig":"32"},{"size":9839,"mtime":1700995254741,"results":"33","hashOfConfig":"32"},{"size":483,"mtime":1700995255765,"results":"34","hashOfConfig":"32"},{"size":2395,"mtime":1701164861389,"results":"35","hashOfConfig":"32"},{"size":2263,"mtime":1701162188034,"results":"36","hashOfConfig":"32"},{"size":853,"mtime":1701162202114,"results":"37","hashOfConfig":"32"},{"size":9732,"mtime":1701168147549,"results":"38","hashOfConfig":"32"},{"size":4455,"mtime":1701103295769,"results":"39","hashOfConfig":"32"},{"size":1835,"mtime":1700936703589,"results":"40","hashOfConfig":"32"},{"size":1877,"mtime":1701077814165,"results":"41","hashOfConfig":"32"},{"size":7260,"mtime":1701102738636,"results":"42","hashOfConfig":"32"},{"size":3870,"mtime":1700936707993,"results":"43","hashOfConfig":"32"},{"size":4085,"mtime":1700936715877,"results":"44","hashOfConfig":"32"},{"size":15193,"mtime":1701165330921,"results":"45","hashOfConfig":"32"},{"size":824,"mtime":1700936715853,"results":"46","hashOfConfig":"32"},{"size":724,"mtime":1700936722221,"results":"47","hashOfConfig":"32"},{"size":7988,"mtime":1701102923371,"results":"48","hashOfConfig":"32"},{"size":1656,"mtime":1701085178606,"results":"49","hashOfConfig":"32"},{"size":770,"mtime":1701105047930,"results":"50","hashOfConfig":"32"},{"size":772,"mtime":1700936715849,"results":"51","hashOfConfig":"32"},{"size":4845,"mtime":1700937141425,"results":"52","hashOfConfig":"32"},{"size":794,"mtime":1700937141457,"results":"53","hashOfConfig":"32"},{"size":3934,"mtime":1700937141453,"results":"54","hashOfConfig":"32"},{"size":2047,"mtime":1701019860652,"results":"55","hashOfConfig":"32"},{"size":1009,"mtime":1701171740017,"results":"56","hashOfConfig":"32"},{"size":1346,"mtime":1701019721646,"results":"57","hashOfConfig":"32"},{"size":522,"mtime":1696937475000,"results":"58","hashOfConfig":"32"},{"size":2567,"mtime":1701165832377,"results":"59","hashOfConfig":"32"},{"size":687,"mtime":1701167207227,"results":"60","hashOfConfig":"32"},{"size":359,"mtime":1696937475000,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"16fbbwy",{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181"},"/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/callback/route.ts",["182"],[],"import { createRouteHandlerClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\n\nimport type { NextRequest } from \"next/server\";\n\nexport async function GET(request: NextRequest) {\n\tconst requestUrl = new URL(request.url);\n\tconst code = requestUrl.searchParams.get(\"code\");\n\n\tif (code) {\n\t\tconst cookieStore = cookies();\n\t\tconst supabase = createRouteHandlerClient({\n\t\t\tcookies: () => cookieStore,\n\t\t});\n\t\tawait supabase.auth.exchangeCodeForSession(code);\n\t}\n\n\t// URL to redirect to after sign in process completes\n\treturn NextResponse.redirect(requestUrl.origin);\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/components/AuthComponent.tsx",["183"],[],"\"use client\";\nimport React from \"react\";\nimport { Metadata } from \"next\";\nimport Image from \"next/image\";\nimport Link from \"next/link\";\nimport { cn } from \"@/lib/utils\";\nimport { Icons } from \"@/components/ui/icons\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { AuthError } from \"@supabase/supabase-js\";\nimport { useRouter } from \"next/navigation\";\n\nexport const metadata: Metadata = {\n  title: \"Authentication\",\n  description: \"Authentication forms built using the components.\",\n};\n\ninterface UserAuthFormProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport default function AuthComponent() {\n  const [login, setLogIn] = React.useState<boolean>(true); //login screen at start\n  const [username, setUsername] = React.useState<string>(\"\");\n  const [email, setEmail] = React.useState<string>(\"\");\n  const [password, setPassword] = React.useState<string>(\"\");\n  const [confirmPass, setConfirmPass] = React.useState<string>(\"\");\n  const [err, setError] = React.useState<AuthError>();\n  const [hide, setHide] = React.useState<boolean>(true); //hidden password\n  const router = useRouter();\n  const togglePasswordVisibility = () => {\n    setHide((hide) => !hide);\n  };\n  const UserAuthForm = ({ className, ...props }: UserAuthFormProps) => {\n    const [isLoading, setIsLoading] = React.useState<boolean>(false);\n    const supabase = createClientComponentClient();\n\n    const handleLoginWithGoogle = () => {\n      supabase.auth.signInWithOAuth({\n        provider: \"google\",\n        options: {\n          redirectTo: location.origin + \"/auth/callback\",\n        },\n      });\n    };\n\n    async function onSubmit(event: React.SyntheticEvent) {\n      event.preventDefault();\n      setIsLoading(true);\n      try {\n        if (email && password) {\n          if (login) {\n            const { data, error } = await supabase.auth.signInWithPassword({\n              email: email,\n              password: password,\n            });\n            if (error) {\n              setError(error);\n            } else {\n              console.log(data);\n              router.replace(\"/\");\n            }\n          } else {\n            console.log(\"1st\");\n            if (password !== confirmPass || !username) {\n              setError(new AuthError(\"Fill all details correctly!\"));\n            } else {\n              console.log(\"2d\");\n              const { data, error } = await supabase.auth.signUp({\n                email: email,\n                password: password,\n                options: {\n                  data: {\n                    userName: username,\n                  },\n                },\n              });\n              if (error) {\n                setError(error);\n              } else {\n                console.log(data.session);\n                router.replace(\"/\");\n              }\n            }\n          }\n        } else {\n          setError(new AuthError(\"Please enter your details\"));\n        }\n      } catch (err) {\n        setIsLoading(false);\n        console.log(err);\n      }\n      setTimeout(() => {\n        setIsLoading(false);\n      }, 3000);\n    }\n\n    return (\n      <div\n        className={cn(\n          \"grid gap-6\",\n\n          className\n        )}\n        {...props}\n      >\n        <div className=\"grid gap-2\">\n          <div className=\"grid gap-1\">\n            <Input\n              defaultValue={email}\n              onBlur={(e) => {\n                e.preventDefault();\n                setEmail(e.target.value);\n              }}\n              placeholder=\"email\"\n              type=\"email\"\n              autoComplete=\"email\"\n              disabled={isLoading}\n            />\n          </div>\n          {!login && (\n            <div className=\"grid gap-1\">\n              <Input\n                defaultValue={username}\n                onBlur={(e) => {\n                  e.preventDefault();\n                  setUsername(e.target.value);\n                }}\n                placeholder=\"username\"\n                type=\"text\"\n                autoComplete=\"off\"\n                disabled={isLoading}\n              />\n            </div>\n          )}\n          <div className=\"flex items-center\">\n            <Input\n              defaultValue={password}\n              onBlur={(e) => {\n                e.preventDefault();\n                setPassword(e.target.value);\n              }}\n              placeholder=\"password\"\n              type={hide ? \"password\" : \"text\"}\n              autoCapitalize=\"none\"\n              autoComplete=\"new-password\"\n              disabled={isLoading}\n              className=\"justify-start\"\n            />\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                togglePasswordVisibility();\n              }}\n              className=\"ml-2 outline-2 bg-slate-50 text-black hover:bg-slate-50\"\n            >\n              <Icons.eyelashes className=\"h-2 w-2 \" />\n            </Button>\n          </div>\n\n          {!login && (\n            <div className=\"grid gap-1\">\n              {/* <Label className=\"sr-only\" htmlFor=\"Password\">\n                Confirm Password\n              </Label> */}\n              <Input\n                defaultValue={confirmPass}\n                onBlur={(e) => {\n                  e.preventDefault();\n                  setConfirmPass(e.target.value);\n                }}\n                placeholder=\"confirm password\"\n                type=\"text\"\n                autoCapitalize=\"none\"\n                autoCorrect=\"off\"\n                autoComplete=\"new-password\"\n                disabled={isLoading}\n              />\n            </div>\n          )}\n          {err && (\n            <div className=\"text-sm text-red-700\">\n              <p>{err.message}</p>\n            </div>\n          )}\n          <Button disabled={isLoading} onClick={onSubmit}>\n            {isLoading && (\n              <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />\n            )}\n            {login ? \"Sign In\" : \"Create an account\"}\n          </Button>\n        </div>\n\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <span className=\"w-full border-t\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-background px-2 text-muted-foreground\">\n              Or continue with\n            </span>\n          </div>\n        </div>\n        <Button\n          variant=\"outline\"\n          type=\"button\"\n          disabled={isLoading}\n          onClick={handleLoginWithGoogle}\n        >\n          {isLoading ? (\n            <Icons.spinner className=\"mr-2 h-4 w-4 animate-spin\" />\n          ) : (\n            <Icons.google className=\"mr-2 h-4 w-4\" />\n          )}{\" \"}\n          Google\n        </Button>\n\n        <div className=\"text-sm flex justify-center\">\n          {login ? (\n            <>\n              First Time?{\"  \"}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  setEmail(\"\");\n                  setPassword(\"\");\n                  setLogIn(false);\n                  setError(undefined);\n                }}\n                className=\"underline underline-offset-4 ml-1\"\n              >\n                Create an account\n              </a>\n            </>\n          ) : (\n            <>\n              Already User?{\"  \"}\n              <a\n                href=\"#\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  setLogIn(true);\n                  setEmail(\"\");\n                  setPassword(\"\");\n                  setError(undefined);\n                }}\n                className=\"underline underline-offset-4 ml-1\"\n              >\n                Log in\n              </a>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <>\n      <div className=\"md:hidden \">\n        <Image\n          src=\"/banana.png\"\n          width={1280}\n          height={843}\n          alt=\"Authentication\"\n          className=\"block dark:hidden\"\n        />\n        <Image\n          src=\"/banana.png\"\n          width={1280}\n          height={843}\n          alt=\"Authentication\"\n          className=\"hidden dark:block\"\n        />\n      </div>\n      <div className=\"container relative hidden h-[800px] flex-col items-center justify-center md:grid lg:max-w-none lg:grid-cols-1 lg:px-0 \">\n        <div className=\"lg:p-8 border-2 border-black rounded-lg shadow-md max-w-screen-md mx-auto\">\n          <div className=\"mx-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]\">\n            <div className=\"flex flex-col space-y-2 text-center\">\n              <h1 className=\"text-2xl font-semibold tracking-tight\">\n                {login ? \"Log In\" : \"Sign up\"}\n              </h1>\n              <p className=\"text-sm text-muted-foreground\">\n                {login\n                  ? \"Enter your email and password below to log in !\"\n                  : \"Enter your details below to Sign up!\"}\n              </p>\n            </div>\n            <UserAuthForm />\n            <p className=\"px-8 text-center text-sm text-muted-foreground\">\n              By clicking continue, you agree to our{\" \"}\n              <Link\n                href=\"/terms\"\n                className=\"underline underline-offset-4 hover:text-primary\"\n              >\n                Terms of Service\n              </Link>{\" \"}\n              and{\" \"}\n              <Link\n                href=\"/privacy\"\n                className=\"underline underline-offset-4 hover:text-primary\"\n              >\n                Privacy Policy\n              </Link>\n              .\n            </p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/auth/page.tsx",["184"],[],"import React from \"react\";\nimport AuthComponent from \"./components/AuthComponent\";\nimport { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\n\nexport default async function page() {\n  const supabase = createServerComponentClient({ cookies });\n\n  const { data } = await supabase.auth.getSession();\n\n  if (data.session) {\n    return redirect(\"/\");\n  }\n\n  return <AuthComponent />;\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/chat/route.ts",["185"],[],"import { createNewChat, insertMessage } from \"@/lib/utils\";\nimport { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\nimport axios from 'axios'\nimport { NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPEN_AI_KEY,\n});\n\nasync function getSummary(text: string) { \n  const options = {\n    method: \"POST\",\n    url : \"https://api.edenai.run/v2/text/summarize\",\n    headers: {\n      \"authorization\": `Bearer ${process.env.SUMMARIZE_KEY}`\n    },\n    data: {\n      \"output_sentences\": 1,\n      \"providers\": \"connexun\",\n      \"text\": text,\n      \"language\": \"en\"\n    }\n  }\n\n let res = {}\n  try {  res = await axios.request(options) } catch (err) { console.log('err',err)}\n  console.log('summary',res)\n  return res?.data?.connexun?.result;\n}\n\nexport async function POST(req: Request) {\n  const supabase = createServerComponentClient({ cookies });\n\n  const { data } = await supabase.auth.getSession();\n \n  if (!data.session) {\n    return NextResponse.json({ message: \"Unauthorize\" }, { status: 403 });\n  }\n\n   const {\n    data: { user },\n  } = await supabase.auth.getUser();\n  console.log(\"user\", user);\n  if (!user) { \n    console.log(\"can't find user\")\n  }\n  var { prompt, searchText, chatId } = await req.json();\n  \n  try {\n    const res = await openai.completions.create({\n      prompt,\n      model: \"text-davinci-003\",\n      max_tokens: 512,\n      temperature: 0,\n    });\n    let ChatName = \"Chat\";\n    let chatData = []\n    // await createNewChat()\n    console.log('openai',res)\n    if (chatId === \"\") {\n      if (res.choices[0].text != \"\\n\\nSorry, I don't know how to help with that.\") { \n        const summary  = await getSummary(res.choices[0].text)\n      console.log(\"New Chat\", summary)\n      const ChatName = summary.slice(0, 20) + (summary.length > 20 ? \"...\" : \"\");\n      chatData = await createNewChat(ChatName, user?.id)\n        chatId = chatData[0].id\n        await insertMessage(searchText, res.choices[0].text, chatId) \n        console.log('ChatData',chatData[0])\n      }\n   \n    } \n    \n    // \n    return NextResponse.json({ answer: res.choices[0].text,chatName: ChatName,chat: chatData[0] });\n  } catch {\n    return NextResponse.json(\n      { message: \"Something went wrong!\" },\n      { status: 400 }\n    );\n  }\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ChatListItem.tsx",["186"],[],"import { Button } from \"./ui/button\";\nimport { Icons } from \"./ui/icons\";\nimport {\n  AlertDialog,\n  AlertDialogCancel,\n  AlertDialogDescription,\n  AlertDialogContent,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogAction,\n} from \"./ui/alert-dialog\";\nimport { Separator } from \"./ui/separator\";\nimport { getAllmessages } from \"@/lib/utils\";\n\nconst ChatListItem = ({\n  chat,\n  toastError,\n  onDelete,\n  toastSuccess,\n  onSelect,\n  chatId,\n}) => {\n  const handleDelete = (e) => {\n    e.stopPropagation();\n    // Handle the delete action here\n    const status = onDelete(chat.id);\n    console.log(\"deleted status\", status);\n\n    toastSuccess(\"Deleted chat\");\n  };\n\n  // onSelect\n\n  return (\n    <div className=\"px-1 pt-2 text-base\">\n      <Button\n        onClick={() => onSelect(chat.id)}\n        className={` rounded-sm outline-2  ${\n          chatId === chat.id ? \"bg-slate-700\" : \"\"\n        } text-white hover:bg-slate-800`}\n      >\n        <div className=\"mr-2 inline-block\">{chat.chat_name}</div>\n        <AlertDialog>\n          <AlertDialogTrigger asChild>\n            <div\n              className=\"inline-block\"\n              onClick={(e) => {\n                e.stopPropagation();\n              }}\n            >\n              <Icons.trash className=\"h-4 w-4\" />\n            </div>\n          </AlertDialogTrigger>\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Delete chat</AlertDialogTitle>\n              <Separator />\n              <AlertDialogDescription>\n                This will delete selected chat\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel className=\"text-white bg-green-700  font-bold hover:bg-green-900 hover:text-white\">\n                Cancel\n              </AlertDialogCancel>\n              <AlertDialogAction\n                onClick={handleDelete}\n                className=\"text-white bg-red-700 font-bold hover:bg-red-900\"\n              >\n                Continue\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </Button>\n    </div>\n  );\n};\nexport default ChatListItem;\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/NewChat.tsx",["187"],[],"import { Button } from \"./ui/button\";\nimport { Icons } from \"./ui/icons\";\nimport {\n  AlertDialog,\n  AlertDialogCancel,\n  AlertDialogDescription,\n  AlertDialogContent,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogAction,\n} from \"./ui/alert-dialog\";\nimport { Separator } from \"./ui/separator\";\nimport { getAllmessages } from \"@/lib/utils\";\n\nconst Newchat = ({ onSelect, active = true }) => {\n  return (\n    <Button\n      onClick={() => onSelect(\"\")}\n      className={`mt-4 text-base rounded-sm outline-2 ${\n        active ? \"bg-slate-700\" : \"\"\n      } text-white hover:bg-slate-800`}\n    >\n      <div className=\"justify-start mr-16 text-bold \">New chat</div>\n      <div className=\"ml-2 justify-end \">\n        <Icons.plus className=\"h-4 w-4\" />\n      </div>\n    </Button>\n  );\n};\nexport default Newchat;\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/Search.tsx",["188"],[],"\"use client\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useRouter } from \"next/navigation\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { PiSealQuestionThin } from \"react-icons/pi\";\nimport { useToast } from \"@/components/ui/use-toast\";\nimport { stripIndent, oneLine } from \"common-tags\";\nimport { Icons } from \"./ui/icons\";\nimport { ScrollArea } from \"./ui/scroll-area\";\nimport dynamic from \"next/dynamic\";\nimport { deleteChat, getAllmessages } from \"@/lib/utils\";\nimport Newchat from \"./NewChat\";\n\nexport default function Search({ allchats }) {\n  const router = useRouter();\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>;\n  const { toast } = useToast();\n  const [questions, setQuestion] = useState<string[]>([]);\n  const [answers, setAnswer] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [chatId, setChatId] = useState<string>(\"\");\n  const [showAlert, setShowAlert] = useState<boolean>(false);\n  const [chatName, setChatName] = useState<string>(\n    \"It was a chat by you ok...\"\n  );\n\n  const [ChatListItem, setChatListItem] = useState(null);\n  const [new_allchats, setAllchats] = useState<Object[]>([]);\n\n  useEffect(() => {\n    // Dynamic import ChatListItem component\n    console.log(\"newAllchats\", allchats);\n    setAllchats(allchats);\n    import(\"./ChatListItem\").then((module) => {\n      setChatListItem(() => module.default);\n    });\n  }, []);\n  const supabase = createClientComponentClient();\n  const MAX_CHARACTERS = 23;\n  const handleLogout = async () => {\n    await supabase.auth.signOut();\n    router.refresh();\n  };\n\n  const toastError = (message = \"Something went wrong\") => {\n    toast({\n      title: \"Fail to create embedding\",\n      description: message,\n    });\n  };\n  const toastSuccess = (message = \"Task complete successfully\") => {\n    toast({\n      title: \"Task complete successfully\",\n      description: message,\n    });\n  };\n  const clearInput = () => {\n    if (inputRef.current) {\n      inputRef.current.value = \"\";\n    }\n  };\n  const handleSearch = async () => {\n    setLoading(true);\n    const searchText = inputRef.current.value;\n\n    if (searchText && searchText.trim()) {\n      setQuestion((currentQuestion) => [...currentQuestion, searchText]);\n      try {\n        const res = await fetch(location.origin + \"/embedding\", {\n          method: \"POST\",\n          body: JSON.stringify({ text: searchText.replace(/\\n/g, \" \") }),\n        });\n        const data = await res.json();\n\n        const { data: documents } = await supabase.rpc(\"match_documents\", {\n          query_embedding: data.embedding,\n          match_threshold: 0.8,\n          match_count: 10,\n        });\n        console.log(data);\n        let tokenCount = 0;\n        let contextText = \"\";\n        for (let i = 0; i < documents.length; i++) {\n          const document = documents[i];\n          const content = document.content;\n          tokenCount += document.token;\n\n          if (tokenCount > 1500) {\n            break;\n          }\n          contextText += `${content.trim()}\\n--\\n`;\n        }\n        if (contextText) {\n          const prompt = generatePrompt(contextText, searchText);\n          console.log(\"prompt: \", prompt);\n          await generateAnswer(prompt, searchText);\n        } else {\n          setAnswer((currentAnswer) => [\n            ...currentAnswer,\n            \"Sorry there is no context related to this question. Please ask something about something\",\n          ]);\n        }\n      } catch (err) {\n        console.log(\"fetch embeddings\", err);\n        toastError();\n      }\n    }\n    inputRef.current.value = \"\";\n    setLoading(false);\n  };\n  const generateAnswer = async (prompt: string, searchText: string) => {\n    try {\n      const res = await fetch(location.origin + \"/chat\", {\n        method: \"POST\",\n        body: JSON.stringify({ prompt, searchText, chatId }),\n      });\n\n      const data = await res.json();\n\n      setAnswer((currentAnswer) => [...currentAnswer, data.answer]);\n      let trimmedContent = data.chatName;\n      if (trimmedContent && trimmedContent > MAX_CHARACTERS) {\n        trimmedContent = trimmedContent.slice(0, MAX_CHARACTERS).append(\"...\");\n      } else if (!trimmedContent) {\n        trimmedContent = \"It was a chat by you ok...\";\n      }\n\n      if (data.chat) {\n        //new chat\n        console.log(\"data.chat\", data.chat);\n        if (!chatId) {\n          setAllchats((prevchats) => [...prevchats, data.chat]);\n        }\n        setChatName(data.chatName);\n        setChatId(data.chat.id);\n      }\n    } catch (err) {\n      console.log(\"generate\", err);\n      toastError();\n    }\n  };\n\n  const generatePrompt = (contextText: string, searchText: string) => {\n    const prompt = stripIndent`${oneLine`\n    You are a very enthusiastic DailyAI representative who loves\n    to help people! Given the following sections from the DailyAI\n    documentation, answer the question using only that information,\n    outputted in markdown format.Also If you are unsure and the answer\n    is not explicitly written in the documentation, say\n    \"Sorry, I don't know how to help with that.\"`}\n\n    Context sections:\n    ${contextText}\n\n    Question: \"\"\"\n    ${searchText}\n    \"\"\"\n\n    Answer as markdown (including related code snippets if available):\n  `;\n    return prompt;\n  };\n  const onSelect = async (chatid) => {\n    // console.log(\"onSelect\", chatid);\n    clearInput();\n    setChatId(chatid);\n    if (!chatid) {\n      setQuestion([]);\n      setAnswer([]);\n    } else {\n      const res = await getAllmessages(chatid);\n      const extractedQuestion = res.map((obj) => obj.question);\n      const extractedAnswers = res.map((obj) => obj.response);\n      setQuestion(extractedQuestion);\n      setAnswer(extractedAnswers);\n    }\n  };\n  async function deleteChat(chatId: string) {\n    try {\n      console.log(\"all chats before\", new_allchats);\n      setAllchats((prevChats) => prevChats.filter((obj) => obj.id !== chatId));\n      console.log(\"all chats after\", new_allchats);\n      if (!chatId) {\n        return null;\n      }\n      supabase\n        .from(\"chat\")\n        .delete()\n        .eq(\"id\", chatId)\n        .then((response) => {\n          // Assuming response is an object with properties like [[PromiseState]] and [[PromiseResult]]\n          const { data, error, status } = response;\n          console.log(\"delete chat\", status);\n          return status;\n        });\n    } catch (e) {\n      console.log(e);\n      return e;\n    }\n  }\n  return (\n    <div className=\"root\">\n      <div className=\"flex flex-row\">\n        <ScrollArea>\n          <div className=\"flex flex-col h-screen px-2 py-7 bg-black shadow border-r items-center w-52 \">\n            <div className=\"text-xl font-bold text-white\">Dashboard</div>\n            <Newchat active={!chatId} onSelect={onSelect} />\n            {new_allchats &&\n              new_allchats.map((obj) => (\n                <>\n                  {ChatListItem ? (\n                    <ChatListItem\n                      chat={obj}\n                      key={obj.id}\n                      toastError={toastError}\n                      onDelete={deleteChat}\n                      toastSuccess={toastSuccess}\n                      onSelect={onSelect}\n                      chatId={chatId}\n                    />\n                  ) : (\n                    <></>\n                  )}\n                </>\n              ))}\n          </div>\n        </ScrollArea>\n\n        <div className=\"flex flex-col container w-screen  px-5 py-5 max-w-screen-xl justify-between\">\n          <div className=\" h-80vh overflow-y-auto space-y-10 \">\n            <div className=\"flex items-center justify-between border-b pb-3 \">\n              <div className=\"flex justify-start items-center gap-2\">\n                <Icons.apple className=\"w-7 h-7\" />\n                <h1 className=\"text-xl font-medium mt-1\">Apple.ai</h1>\n              </div>\n              <Button onClick={handleLogout} className=\"justify-end\">\n                Logout\n              </Button>\n            </div>\n            {!chatId &&\n              questions.length == 0 &&\n              answers.length == 0 &&\n              !loading && (\n                <div className=\"items-center justify-center text-2xl font-semibold text-gray-800\">\n                  Welcome to the world of Apple !\n                  <br />\n                  How can I help you today? ...\n                </div>\n              )}\n            <ScrollArea>\n              {questions.map((question, index) => {\n                const answer = answers[index];\n                console.log(\"answer\", answer);\n                const isLoading = loading && !answer;\n\n                return (\n                  <div className=\"space-y-3\" key={index}>\n                    <div className=\"flex items-center gap-2 text-indigo-500\">\n                      <Icons.user className=\"w-5 h-5\" />\n                      <h1 className=\"text-black font-bold\">{question}</h1>\n                    </div>\n                    {isLoading ? (\n                      <h1>Loading...</h1>\n                    ) : (\n                      <p className=\"text-black\">{answer}</p>\n                    )}\n                  </div>\n                );\n              })}\n            </ScrollArea>\n          </div>\n\n          <Input\n            ref={inputRef}\n            placeholder=\"Ask questions related to Apple products ...\"\n            className=\"p-5\"\n            onKeyDown={(e) => {\n              if (e.key === \"Enter\") {\n                handleSearch();\n              }\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/alert-dialog.tsx",["189"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/button.tsx",["190"],[],"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/card.tsx",["191"],[],"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/context-menu.tsx",["192"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/dialog.tsx",["193"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/form.tsx",["194"],[],"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/icons.tsx",["195"],[],"type IconProps = React.HTMLAttributes<SVGElement>;\n\nexport const Icons = {\n  logo: (props: IconProps) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 256 256\" {...props}>\n      <rect width=\"256\" height=\"256\" fill=\"none\" />\n      <line\n        x1=\"208\"\n        y1=\"128\"\n        x2=\"128\"\n        y2=\"208\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"16\"\n      />\n      <line\n        x1=\"192\"\n        y1=\"40\"\n        x2=\"40\"\n        y2=\"192\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"16\"\n      />\n    </svg>\n  ),\n  twitter: (props: IconProps) => (\n    <svg\n      {...props}\n      height=\"23\"\n      viewBox=\"0 0 1200 1227\"\n      width=\"23\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <path d=\"M714.163 519.284L1160.89 0H1055.03L667.137 450.887L357.328 0H0L468.492 681.821L0 1226.37H105.866L515.491 750.218L842.672 1226.37H1200L714.137 519.284H714.163ZM569.165 687.828L521.697 619.934L144.011 79.6944H306.615L611.412 515.685L658.88 583.579L1055.08 1150.3H892.476L569.165 687.854V687.828Z\" />\n    </svg>\n  ),\n  gitHub: (props: IconProps) => (\n    <svg viewBox=\"0 0 438.549 438.549\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M409.132 114.573c-19.608-33.596-46.205-60.194-79.798-79.8-33.598-19.607-70.277-29.408-110.063-29.408-39.781 0-76.472 9.804-110.063 29.408-33.596 19.605-60.192 46.204-79.8 79.8C9.803 148.168 0 184.854 0 224.63c0 47.78 13.94 90.745 41.827 128.906 27.884 38.164 63.906 64.572 108.063 79.227 5.14.954 8.945.283 11.419-1.996 2.475-2.282 3.711-5.14 3.711-8.562 0-.571-.049-5.708-.144-15.417a2549.81 2549.81 0 01-.144-25.406l-6.567 1.136c-4.187.767-9.469 1.092-15.846 1-6.374-.089-12.991-.757-19.842-1.999-6.854-1.231-13.229-4.086-19.13-8.559-5.898-4.473-10.085-10.328-12.56-17.556l-2.855-6.57c-1.903-4.374-4.899-9.233-8.992-14.559-4.093-5.331-8.232-8.945-12.419-10.848l-1.999-1.431c-1.332-.951-2.568-2.098-3.711-3.429-1.142-1.331-1.997-2.663-2.568-3.997-.572-1.335-.098-2.43 1.427-3.289 1.525-.859 4.281-1.276 8.28-1.276l5.708.853c3.807.763 8.516 3.042 14.133 6.851 5.614 3.806 10.229 8.754 13.846 14.842 4.38 7.806 9.657 13.754 15.846 17.847 6.184 4.093 12.419 6.136 18.699 6.136 6.28 0 11.704-.476 16.274-1.423 4.565-.952 8.848-2.383 12.847-4.285 1.713-12.758 6.377-22.559 13.988-29.41-10.848-1.14-20.601-2.857-29.264-5.14-8.658-2.286-17.605-5.996-26.835-11.14-9.235-5.137-16.896-11.516-22.985-19.126-6.09-7.614-11.088-17.61-14.987-29.979-3.901-12.374-5.852-26.648-5.852-42.826 0-23.035 7.52-42.637 22.557-58.817-7.044-17.318-6.379-36.732 1.997-58.24 5.52-1.715 13.706-.428 24.554 3.853 10.85 4.283 18.794 7.952 23.84 10.994 5.046 3.041 9.089 5.618 12.135 7.708 17.705-4.947 35.976-7.421 54.818-7.421s37.117 2.474 54.823 7.421l10.849-6.849c7.419-4.57 16.18-8.758 26.262-12.565 10.088-3.805 17.802-4.853 23.134-3.138 8.562 21.509 9.325 40.922 2.279 58.24 15.036 16.18 22.559 35.787 22.559 58.817 0 16.178-1.958 30.497-5.853 42.966-3.9 12.471-8.941 22.457-15.125 29.979-6.191 7.521-13.901 13.85-23.131 18.986-9.232 5.14-18.182 8.85-26.84 11.136-8.662 2.286-18.415 4.004-29.263 5.146 9.894 8.562 14.842 22.077 14.842 40.539v60.237c0 3.422 1.19 6.279 3.572 8.562 2.379 2.279 6.136 2.95 11.276 1.995 44.163-14.653 80.185-41.062 108.068-79.226 27.88-38.161 41.825-81.126 41.825-128.906-.01-39.771-9.818-76.454-29.414-110.049z\"\n      ></path>\n    </svg>\n  ),\n  radix: (props: IconProps) => (\n    <svg viewBox=\"0 0 25 25\" fill=\"none\" {...props}>\n      <path\n        d=\"M12 25C7.58173 25 4 21.4183 4 17C4 12.5817 7.58173 9 12 9V25Z\"\n        fill=\"currentcolor\"\n      ></path>\n      <path d=\"M12 0H4V8H12V0Z\" fill=\"currentcolor\"></path>\n      <path\n        d=\"M17 8C19.2091 8 21 6.20914 21 4C21 1.79086 19.2091 0 17 0C14.7909 0 13 1.79086 13 4C13 6.20914 14.7909 8 17 8Z\"\n        fill=\"currentcolor\"\n      ></path>\n    </svg>\n  ),\n  aria: (props: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" fill=\"currentColor\" {...props}>\n      <path d=\"M13.966 22.624l-1.69-4.281H8.122l3.892-9.144 5.662 13.425zM8.884 1.376H0v21.248zm15.116 0h-8.884L24 22.624Z\" />\n    </svg>\n  ),\n  npm: (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M1.763 0C.786 0 0 .786 0 1.763v20.474C0 23.214.786 24 1.763 24h20.474c.977 0 1.763-.786 1.763-1.763V1.763C24 .786 23.214 0 22.237 0zM5.13 5.323l13.837.019-.009 13.836h-3.464l.01-10.382h-3.456L12.04 19.17H5.113z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  yarn: (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M12 0C5.375 0 0 5.375 0 12s5.375 12 12 12 12-5.375 12-12S18.625 0 12 0zm.768 4.105c.183 0 .363.053.525.157.125.083.287.185.755 1.154.31-.088.468-.042.551-.019.204.056.366.19.463.375.477.917.542 2.553.334 3.605-.241 1.232-.755 2.029-1.131 2.576.324.329.778.899 1.117 1.825.278.774.31 1.478.273 2.015a5.51 5.51 0 0 0 .602-.329c.593-.366 1.487-.917 2.553-.931.714-.009 1.269.445 1.353 1.103a1.23 1.23 0 0 1-.945 1.362c-.649.158-.95.278-1.821.843-1.232.797-2.539 1.242-3.012 1.39a1.686 1.686 0 0 1-.704.343c-.737.181-3.266.315-3.466.315h-.046c-.783 0-1.214-.241-1.45-.491-.658.329-1.51.19-2.122-.134a1.078 1.078 0 0 1-.58-1.153 1.243 1.243 0 0 1-.153-.195c-.162-.25-.528-.936-.454-1.946.056-.723.556-1.367.88-1.71a5.522 5.522 0 0 1 .408-2.256c.306-.727.885-1.348 1.32-1.737-.32-.537-.644-1.367-.329-2.21.227-.602.412-.936.82-1.08h-.005c.199-.074.389-.153.486-.259a3.418 3.418 0 0 1 2.298-1.103c.037-.093.079-.185.125-.283.31-.658.639-1.029 1.024-1.168a.94.94 0 0 1 .328-.06zm.006.7c-.507.016-1.001 1.519-1.001 1.519s-1.27-.204-2.266.871c-.199.218-.468.334-.746.44-.079.028-.176.023-.417.672-.371.991.625 2.094.625 2.094s-1.186.839-1.626 1.881c-.486 1.144-.338 2.261-.338 2.261s-.843.732-.899 1.487c-.051.663.139 1.2.343 1.515.227.343.51.176.51.176s-.561.653-.037.931c.477.25 1.283.394 1.71-.037.31-.31.371-1.001.486-1.283.028-.065.12.111.209.199.097.093.264.195.264.195s-.755.324-.445 1.066c.102.246.468.403 1.066.398.222-.005 2.664-.139 3.313-.296.375-.088.505-.283.505-.283s1.566-.431 2.998-1.357c.917-.598 1.293-.76 2.034-.936.612-.148.57-1.098-.241-1.084-.839.009-1.575.44-2.196.825-1.163.718-1.742.672-1.742.672l-.018-.032c-.079-.13.371-1.293-.134-2.678-.547-1.515-1.413-1.881-1.344-1.997.297-.5 1.038-1.297 1.334-2.78.176-.899.13-2.377-.269-3.151-.074-.144-.732.241-.732.241s-.616-1.371-.788-1.483a.271.271 0 0 0-.157-.046z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  pnpm: (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M0 0v7.5h7.5V0zm8.25 0v7.5h7.498V0zm8.25 0v7.5H24V0zM8.25 8.25v7.5h7.498v-7.5zm8.25 0v7.5H24v-7.5zM0 16.5V24h7.5v-7.5zm8.25 0V24h7.498v-7.5zm8.25 0V24H24v-7.5z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  react: (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M14.23 12.004a2.236 2.236 0 0 1-2.235 2.236 2.236 2.236 0 0 1-2.236-2.236 2.236 2.236 0 0 1 2.235-2.236 2.236 2.236 0 0 1 2.236 2.236zm2.648-10.69c-1.346 0-3.107.96-4.888 2.622-1.78-1.653-3.542-2.602-4.887-2.602-.41 0-.783.093-1.106.278-1.375.793-1.683 3.264-.973 6.365C1.98 8.917 0 10.42 0 12.004c0 1.59 1.99 3.097 5.043 4.03-.704 3.113-.39 5.588.988 6.38.32.187.69.275 1.102.275 1.345 0 3.107-.96 4.888-2.624 1.78 1.654 3.542 2.603 4.887 2.603.41 0 .783-.09 1.106-.275 1.374-.792 1.683-3.263.973-6.365C22.02 15.096 24 13.59 24 12.004c0-1.59-1.99-3.097-5.043-4.032.704-3.11.39-5.587-.988-6.38-.318-.184-.688-.277-1.092-.278zm-.005 1.09v.006c.225 0 .406.044.558.127.666.382.955 1.835.73 3.704-.054.46-.142.945-.25 1.44-.96-.236-2.006-.417-3.107-.534-.66-.905-1.345-1.727-2.035-2.447 1.592-1.48 3.087-2.292 4.105-2.295zm-9.77.02c1.012 0 2.514.808 4.11 2.28-.686.72-1.37 1.537-2.02 2.442-1.107.117-2.154.298-3.113.538-.112-.49-.195-.964-.254-1.42-.23-1.868.054-3.32.714-3.707.19-.09.4-.127.563-.132zm4.882 3.05c.455.468.91.992 1.36 1.564-.44-.02-.89-.034-1.345-.034-.46 0-.915.01-1.36.034.44-.572.895-1.096 1.345-1.565zM12 8.1c.74 0 1.477.034 2.202.093.406.582.802 1.203 1.183 1.86.372.64.71 1.29 1.018 1.946-.308.655-.646 1.31-1.013 1.95-.38.66-.773 1.288-1.18 1.87-.728.063-1.466.098-2.21.098-.74 0-1.477-.035-2.202-.093-.406-.582-.802-1.204-1.183-1.86-.372-.64-.71-1.29-1.018-1.946.303-.657.646-1.313 1.013-1.954.38-.66.773-1.286 1.18-1.868.728-.064 1.466-.098 2.21-.098zm-3.635.254c-.24.377-.48.763-.704 1.16-.225.39-.435.782-.635 1.174-.265-.656-.49-1.31-.676-1.947.64-.15 1.315-.283 2.015-.386zm7.26 0c.695.103 1.365.23 2.006.387-.18.632-.405 1.282-.66 1.933-.2-.39-.41-.783-.64-1.174-.225-.392-.465-.774-.705-1.146zm3.063.675c.484.15.944.317 1.375.498 1.732.74 2.852 1.708 2.852 2.476-.005.768-1.125 1.74-2.857 2.475-.42.18-.88.342-1.355.493-.28-.958-.646-1.956-1.1-2.98.45-1.017.81-2.01 1.085-2.964zm-13.395.004c.278.96.645 1.957 1.1 2.98-.45 1.017-.812 2.01-1.086 2.964-.484-.15-.944-.318-1.37-.5-1.732-.737-2.852-1.706-2.852-2.474 0-.768 1.12-1.742 2.852-2.476.42-.18.88-.342 1.356-.494zm11.678 4.28c.265.657.49 1.312.676 1.948-.64.157-1.316.29-2.016.39.24-.375.48-.762.705-1.158.225-.39.435-.788.636-1.18zm-9.945.02c.2.392.41.783.64 1.175.23.39.465.772.705 1.143-.695-.102-1.365-.23-2.006-.386.18-.63.406-1.282.66-1.933zM17.92 16.32c.112.493.2.968.254 1.423.23 1.868-.054 3.32-.714 3.708-.147.09-.338.128-.563.128-1.012 0-2.514-.807-4.11-2.28.686-.72 1.37-1.536 2.02-2.44 1.107-.118 2.154-.3 3.113-.54zm-11.83.01c.96.234 2.006.415 3.107.532.66.905 1.345 1.727 2.035 2.446-1.595 1.483-3.092 2.295-4.11 2.295-.22-.005-.406-.05-.553-.132-.666-.38-.955-1.834-.73-3.703.054-.46.142-.944.25-1.438zm4.56.64c.44.02.89.034 1.345.034.46 0 .915-.01 1.36-.034-.44.572-.895 1.095-1.345 1.565-.455-.47-.91-.993-1.36-1.565z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  tailwind: (props: IconProps) => (\n    <svg viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M12.001,4.8c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 C13.666,10.618,15.027,12,18.001,12c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C16.337,6.182,14.976,4.8,12.001,4.8z M6.001,12c-3.2,0-5.2,1.6-6,4.8c1.2-1.6,2.6-2.2,4.2-1.8c0.913,0.228,1.565,0.89,2.288,1.624 c1.177,1.194,2.538,2.576,5.512,2.576c3.2,0,5.2-1.6,6-4.8c-1.2,1.6-2.6,2.2-4.2,1.8c-0.913-0.228-1.565-0.89-2.288-1.624 C10.337,13.382,8.976,12,6.001,12z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  google: (props: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M12.48 10.92v3.28h7.84c-.24 1.84-.853 3.187-1.787 4.133-1.147 1.147-2.933 2.4-6.053 2.4-4.827 0-8.6-3.893-8.6-8.72s3.773-8.72 8.6-8.72c2.6 0 4.507 1.027 5.907 2.347l2.307-2.307C18.747 1.44 16.133 0 12.48 0 5.867 0 .307 5.387.307 12s5.56 12 12.173 12c3.573 0 6.267-1.173 8.373-3.36 2.16-2.16 2.84-5.213 2.84-7.667 0-.76-.053-1.467-.173-2.053H12.48z\"\n      />\n    </svg>\n  ),\n  apple: (props: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M12.152 6.896c-.948 0-2.415-1.078-3.96-1.04-2.04.027-3.91 1.183-4.961 3.014-2.117 3.675-.546 9.103 1.519 12.09 1.013 1.454 2.208 3.09 3.792 3.039 1.52-.065 2.09-.987 3.935-.987 1.831 0 2.35.987 3.96.948 1.637-.026 2.676-1.48 3.676-2.948 1.156-1.688 1.636-3.325 1.662-3.415-.039-.013-3.182-1.221-3.22-4.857-.026-3.04 2.48-4.494 2.597-4.559-1.429-2.09-3.623-2.324-4.39-2.376-2-.156-3.675 1.09-4.61 1.09zM15.53 3.83c.843-1.012 1.4-2.427 1.245-3.83-1.207.052-2.662.805-3.532 1.818-.78.896-1.454 2.338-1.273 3.714 1.338.104 2.715-.688 3.559-1.701\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  paypal: (props: IconProps) => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" {...props}>\n      <path\n        d=\"M7.076 21.337H2.47a.641.641 0 0 1-.633-.74L4.944.901C5.026.382 5.474 0 5.998 0h7.46c2.57 0 4.578.543 5.69 1.81 1.01 1.15 1.304 2.42 1.012 4.287-.023.143-.047.288-.077.437-.983 5.05-4.349 6.797-8.647 6.797h-2.19c-.524 0-.968.382-1.05.9l-1.12 7.106zm14.146-14.42a3.35 3.35 0 0 0-.607-.541c-.013.076-.026.175-.041.254-.93 4.778-4.005 7.201-9.138 7.201h-2.19a.563.563 0 0 0-.556.479l-1.187 7.527h-.506l-.24 1.516a.56.56 0 0 0 .554.647h3.882c.46 0 .85-.334.922-.788.06-.26.76-4.852.816-5.09a.932.932 0 0 1 .923-.788h.58c3.76 0 6.705-1.528 7.565-5.946.36-1.847.174-3.388-.777-4.471z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  ),\n  spinner: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      strokeWidth=\"2\"\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      {...props}\n    >\n      <path d=\"M21 12a9 9 0 1 1-6.219-8.56\" />\n    </svg>\n  ),\n  eyelashes: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"20\"\n      height=\"20\"\n      fill=\"currentColor\"\n      className=\"bi bi-eye\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8M1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z\" />\n      <path d=\"M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5M4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0\" />\n    </svg>\n  ),\n  threeHorizontalDots: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-three-dots\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"M3 9.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3m5 0a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3\" />\n    </svg>\n  ),\n  trash: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-trash\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5m3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0z\" />\n      <path d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4zM2.5 3h11V2h-11z\" />\n    </svg>\n  ),\n  plus: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-plus-lg\"\n      viewBox=\"0 0 16 16\"\n    >\n      <path\n        fill-rule=\"evenodd\"\n        d=\"M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2\"\n      />\n    </svg>\n  ),\n  user: (props: IconProps) => (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"16\"\n      height=\"16\"\n      fill=\"currentColor\"\n      className=\"bi bi-person-fill\"\n      viewBox=\"0 0 16 16\"\n      color=\"black\"\n    >\n      <path d=\"M3 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6\" />\n    </svg>\n  ),\n};\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/input.tsx",["196"],[],"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/label.tsx",["197"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/menubar.tsx",["198"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/scroll-area.tsx",["199"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/separator.tsx",["200"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/textarea.tsx",["201"],[],"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/toast.tsx",["202"],[],"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/toaster.tsx",["203"],[],"\"use client\"\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/components/ui/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/components/ui/use-toast.ts",["204"],[],"// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/dataset/components/Form.tsx",["205"],[],"\"use client\";\nimport React, { useRef, useState } from \"react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { AiOutlineLoading3Quarters } from \"react-icons/ai\";\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { useToast } from \"@/components/ui/use-toast\";\n\nexport default function Form() {\n  const supabase = createClientComponentClient();\n  const { toast } = useToast();\n\n  const inputRef = useRef() as React.MutableRefObject<HTMLTextAreaElement>;\n  const [loading, setLoading] = useState(false);\n\n  const toastError = (message = \"Something went wrong\") => {\n    toast({\n      title: \"Fail to create embedding\",\n      description: message,\n    });\n  };\n\n  const handleSubmit = async () => {\n    setLoading(true);\n    const content = inputRef.current.value;\n\n    if (content && content.trim()) {\n      const res = await fetch(location.origin + \"/embedding\", {\n        method: \"POST\",\n        body: JSON.stringify({ text: content.replace(/\\n/g, \" \") }),\n      });\n      console.log(\"fetching embedding in form\", res);\n      if (res.status !== 200) {\n        toastError();\n      } else {\n        const result = await res.json();\n        const embedding = result.embedding;\n        const token = result.token;\n\n        const { error } = await supabase.from(\"documents\").insert({\n          content,\n          embedding,\n          token,\n        });\n        if (error) {\n          toastError(error.message);\n        } else {\n          toast({\n            title: \"Successfully create embedding.\",\n          });\n          inputRef.current.value = \"\";\n        }\n      }\n    }\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <Textarea\n        placeholder=\"Add your dataset\"\n        className=\"h-96\"\n        ref={inputRef}\n      />\n      <Button className=\"w-full flex gap-2\" onClick={handleSubmit}>\n        {loading && (\n          <AiOutlineLoading3Quarters className=\"w-5 h-5 animate-spin\" />\n        )}\n        Submit\n      </Button>\n    </>\n  );\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/dataset/page.tsx",["206"],[],"import React from \"react\";\nimport { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\nimport { BsDatabase } from \"react-icons/bs\";\nimport Form from \"./components/Form\";\n\nexport default async function Page() {\n  const supabase = createServerComponentClient({ cookies });\n\n  const { data } = await supabase.auth.getSession();\n\n  if (!data.session) {\n    return redirect(\"/auth\");\n  }\n\n  const { data: user } = await supabase\n    .from(\"users\")\n    .select(\"role\")\n    .eq(\"id\", data.session.user.id)\n    .single();\n  if (user?.role !== \"admin\") {\n    return redirect(\"/\");\n  }\n  return (\n    <div className=\"max-w-4xl mx-auto h-screen flex justify-center items-center\">\n      <div className=\"w-full p-5 space-y-3\">\n        <div className=\"flex items-center gap-2\">\n          <BsDatabase className=\"w-5 h-5\" />\n          <h1>Daily AI dataset</h1>\n        </div>\n        <Form />\n      </div>\n    </div>\n  );\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/embedding/route.ts",["207"],[],"import { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { NextResponse } from \"next/server\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  apiKey: process.env.OPEN_AI_KEY,\n});\n\nexport async function POST(req: Request) {\n  const supabase = createServerComponentClient({ cookies });\n  const { data } = await supabase.auth.getSession();\n\n  if (!data.session) {\n    return NextResponse.json({ message: \"Unauthorize\" }, { status: 403 });\n  }\n\n  // console.log('data',data)\n  const request = await req.json();\n\n  if (!request?.text) {\n    return NextResponse.json(\n      {\n        message: \"Invalid request missing key.\",\n      },\n      { status: 422 }\n    );\n  }\n  try {\n    // console.log('enters',request)\n    const result = await openai.embeddings.create({\n      input: request.text,\n      model: \"text-embedding-ada-002\",\n    });\n    // console.log('results',result)\n    const embedding = result.data[0].embedding;\n    const token = result.usage.total_tokens;\n    // console.log('embeddings',embedding)\n    return NextResponse.json({\n      token,\n      embedding,\n    });\n  } catch (err) {\n    // console.log('generate embeddings',err)\n    return NextResponse.json(\n      {\n        message: \"Something went wrong\" + err,\n      },\n      { status: 400 }\n    );\n  }\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/layout.tsx",["208"],[],"import \"./globals.css\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport { Toaster } from \"@/components/ui/toaster\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n\ttitle: \"Create Next App\",\n\tdescription: \"Generated by create next app\",\n};\n\nexport default function RootLayout({\n\tchildren,\n}: {\n\tchildren: React.ReactNode;\n}) {\n\treturn (\n\t\t<html lang=\"en\">\n\t\t\t<body className={inter.className}>\n\t\t\t\t{children} <Toaster />\n\t\t\t</body>\n\t\t</html>\n\t);\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/lib/utils.ts",["209"],[],"import { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { UserIdentity } from \"@supabase/supabase-js\";\nimport { type ClassValue, clsx } from \"clsx\";\nimport { UUID } from \"crypto\";\nimport { twMerge } from \"tailwind-merge\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { error } from \"console\";\nconst supabase = createClientComponentClient();\nfunction cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nasync function createNewChat(chat_name: string, userId: string | undefined) {\n  try {\n    if (!userId) {\n      return null;\n    }\n    const { data, error, status } = await supabase\n      .from(\"chat\")\n      .insert([{ user_id: userId, chat_name }])\n      .select();\n    if (error) {\n      return status;\n    }\n    console.log(\"Inserted\");\n    return data;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n}\n\nasync function getAllChats(user_id: string) {\n  try {\n    if (!user_id) {\n      return null;\n    }\n    const { data, error, status } = await supabase\n      .from(\"chat\")\n      .select(\"*\")\n      .eq(\"user_id\", user_id);\n    if (error) {\n      console.log(\"error retrieving all chats\", error);\n      return status;\n    }\n    console.log(\"all chats\", data);\n    return data;\n  } catch (e) {\n    console.log(e);\n    return e;\n  }\n}\n\n\n\n// user_id: UUID\nconst getAllmessages = async (chatId) => {\n  try {\n    const { data, error } = await supabase\n      .from(\"message\")\n      .select(\"*\")\n      .eq(\"chat_id\", chatId);\n\n    console.log('read message data', data, error);\n\n    if (error) {\n      console.log(\"error\", error);\n      return [];\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching messages\", error);\n    return [];\n  }\n};\n\n\n// user_id: UUID\nasync function insertMessage(\n  question: string,\n  response: string,\n  chatId: bigint\n) {\n  try {\n    if (!chatId) {\n      console.log(\"Not chatID\");\n      return null;\n    }\n    const { data, error, status } = await supabase\n      .from(\"message\")\n      .insert([{ chat_id: chatId, question, response }]);\n    if (error) {\n      console.log(\"insert MEssage\", error);\n      return status;\n    }\n    console.log(\"Inserted MEssage\", data);\n    return data;\n  } catch (e) {\n    console.log(\"insert MEssage\", e);\n    console.log(e);\n    return e;\n  }\n}\n\nexport {\n  cn,\n  insertMessage,\n  createNewChat,\n  getAllChats,\n\n  getAllmessages,\n};\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/app/page.tsx",["210"],[],"import { createServerComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport { cookies } from \"next/headers\";\nimport { redirect } from \"next/navigation\";\nimport React from \"react\";\nimport Search from \"@/components/Search\";\nimport { createNewChat, getAllChats } from \"./lib/utils\";\n\nexport default async function Page() {\n  const supabase = createServerComponentClient({ cookies });\n\n  const { data } = await supabase.auth.getSession();\n\n  if (!data.session) {\n    return redirect(\"/auth\");\n  }\n\n  const allChats = await getAllChats(data.session.user.id);\n\n  return (\n    <div className=\"h-screen w-screen flex items-center\">\n      <Search allchats={allChats} />\n    </div>\n  );\n}\n","/home/kirtan/Documents/supabase-chat-gpt-main/src/middleware.ts",["211"],[],"import { createMiddlewareClient } from \"@supabase/auth-helpers-nextjs\";\nimport { NextResponse } from \"next/server\";\n\nimport type { NextRequest } from \"next/server\";\n\nexport async function middleware(req: NextRequest) {\n\tconst res = NextResponse.next();\n\tconst supabase = createMiddlewareClient({ req, res });\n\tawait supabase.auth.getSession();\n\treturn res;\n}\n",{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":2,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":2,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"213","line":1,"column":6,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":3,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":2,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":2,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"212","line":1,"column":1,"nodeType":null},"Parsing error: The keyword 'import' is reserved","Parsing error: Unexpected token IconProps"]